### YamlMime:PythonClass
uid: azure.containerregistry.aio.ContainerRegistryClient
name: ContainerRegistryClient
fullName: azure.containerregistry.aio.ContainerRegistryClient
module: azure.containerregistry.aio
inheritances:
- azure.containerregistry.aio._async_base_client.ContainerRegistryBaseClient
summary: Create a ContainerRegistryClient from an ACR endpoint and a credential.
constructor:
  syntax: 'ContainerRegistryClient(endpoint: str, credential: AsyncTokenCredential
    | None = None, *, api_version: str | None = None, audience: str = ''https://management.azure.com'',
    **kwargs)'
  parameters:
  - name: endpoint
    description: An ACR endpoint.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credential with which to authenticate. This should be None in
      anonymous access.
    defaultValue: None
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
    - <xref:None>
  - name: api_version
    description: 'API Version. The default value is "2021-07-01". Note that overriding
      this default value

      may result in unsupported behavior.'
    types:
    - <xref:str>
  - name: audience
    description: 'URL to use for credential authentication with AAD. Its value could
      be

      "[https://management.azure.com](https://management.azure.com)", "[https://management.chinacloudapi.cn](https://management.chinacloudapi.cn)"
      or

      "[https://management.usgovcloudapi.net](https://management.usgovcloudapi.net)".
      The default value is "[https://management.azure.com](https://management.azure.com)".'
    types:
    - <xref:str>
methods:
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_manifest
  name: delete_manifest
  summary: "Delete a manifest. If the manifest cannot be found or a response status\
    \ code of\n404 is returned an error will not be raised.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   await client.delete_manifest(\"\
    my_repository\", \"my_tag_or_digest\")\n   ````"
  signature: 'async delete_manifest(repository: str, tag_or_digest: str, **kwargs)
    -> None'
  parameters:
  - name: repository
    description: Repository the manifest belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: Tag or digest of the manifest to be deleted.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_repository
  name: delete_repository
  summary: 'Delete a repository. If the repository cannot be found or a response status
    code of

    404 is returned an error will not be raised.'
  signature: 'async delete_repository(repository: str, **kwargs) -> None'
  parameters:
  - name: repository
    description: The repository to delete
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_tag
  name: delete_tag
  summary: "Delete a tag from a repository. If the tag cannot be found or a response\
    \ status code of\n404 is returned an error will not be raised.\n\nExample\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   from azure.containerregistry.aio import ContainerRegistryClient\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"\
    ]\n   client = ContainerRegistryClient(endpoint, DefaultAzureCredential(), audience=\"\
    my_audience\")\n   async for tag in client.list_tag_properties(\"my_repository\"\
    ):\n       await client.delete_tag(\"my_repository\", tag.name)\n   ````"
  signature: 'async delete_tag(repository: str, tag: str, **kwargs) -> None'
  parameters:
  - name: repository
    description: Repository the tag belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag
    description: The tag to be deleted
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_manifest_properties
  name: get_manifest_properties
  summary: "Get the properties of a registry artifact\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   async for artifact in\
    \ client.list_manifest_properties(\"my_repository\"):\n       properties = await\
    \ client.get_manifest_properties(\"my_repository\", artifact.digest)\n   ````"
  signature: 'async get_manifest_properties(repository: str, tag_or_digest: str, **kwargs)
    -> ArtifactManifestProperties'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: The tag or digest of the manifest
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactManifestProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_repository_properties
  name: get_repository_properties
  summary: Get the properties of a repository
  signature: 'async get_repository_properties(repository: str, **kwargs) -> RepositoryProperties'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.RepositoryProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_tag_properties
  name: get_tag_properties
  summary: "Get the properties for a tag\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   async for tag in client.list_tag_properties(\"\
    my_repository\"):\n       tag_properties = await client.get_tag_properties(\"\
    my_repository\", tag.name)\n   ````"
  signature: 'async get_tag_properties(repository: str, tag: str, **kwargs) -> ArtifactTagProperties'
  parameters:
  - name: repository
    description: Repository the tag belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag
    description: The tag to get properties for
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactTagProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.list_manifest_properties
  name: list_manifest_properties
  summary: List the manifests of a repository
  signature: 'list_manifest_properties(repository: str, **kwargs) -> AsyncItemPaged[ArtifactManifestProperties]'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: order_by
    description: Query parameter for ordering by time ascending or descending
    types:
    - <xref:azure.containerregistry.ArtifactManifestOrder>
    - <xref:str>
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of <xref:azure.containerregistry.ArtifactManifestProperties>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.containerregistry.ArtifactManifestProperties>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.list_repository_names
  name: list_repository_names
  summary: List all repositories
  signature: list_repository_names(**kwargs) -> AsyncItemPaged[str]
  parameters:
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of strings
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.list_tag_properties
  name: list_tag_properties
  summary: "List the tags for a repository\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   async for tag in client.list_tag_properties(\"\
    my_repository\"):\n       tag_properties = await client.get_tag_properties(tag.name)\n\
    \   ````"
  signature: 'list_tag_properties(repository: str, **kwargs) -> AsyncItemPaged[ArtifactTagProperties]'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: order_by
    description: Query parameter for ordering by time ascending or descending
    types:
    - <xref:azure.containerregistry.ArtifactTagOrder>
    - <xref:str>
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of <xref:azure.containerregistry.ArtifactTagProperties>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.containerregistry.ArtifactTagProperties>]
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.update_manifest_properties
  name: update_manifest_properties
  signature: 'async update_manifest_properties(repository: str, tag_or_digest: str,
    properties: ArtifactManifestProperties, **kwargs) -> ArtifactManifestProperties'
- uid: azure.containerregistry.aio.ContainerRegistryClient.update_repository_properties
  name: update_repository_properties
  signature: 'async update_repository_properties(repository: str, properties: RepositoryProperties,
    **kwargs) -> RepositoryProperties'
- uid: azure.containerregistry.aio.ContainerRegistryClient.update_tag_properties
  name: update_tag_properties
  signature: 'async update_tag_properties(repository: str, tag: str, properties: ArtifactTagProperties,
    **kwargs) -> ArtifactTagProperties'
