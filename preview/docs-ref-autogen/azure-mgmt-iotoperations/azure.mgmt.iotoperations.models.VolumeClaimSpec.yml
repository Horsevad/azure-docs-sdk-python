### YamlMime:PythonClass
uid: azure.mgmt.iotoperations.models.VolumeClaimSpec
name: VolumeClaimSpec
fullName: azure.mgmt.iotoperations.models.VolumeClaimSpec
module: azure.mgmt.iotoperations.models
summary: VolumeClaimSpec properties.
constructor:
  syntax: 'VolumeClaimSpec(*args: Any, **kwargs: Any)'
variables:
- description: 'VolumeName is the binding reference to the PersistentVolume backing
    this

    claim.'
  name: volume_name
  types:
  - <xref:str>
- description: 'volumeMode defines what type of volume is required by the claim. Value
    of

    Filesystem is implied when not included in claim spec. This is a beta feature.'
  name: volume_mode
  types:
  - <xref:str>
- description: 'Name of the StorageClass required by the claim. More info:

    [https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1](https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1).'
  name: storage_class_name
  types:
  - <xref:str>
- description: 'AccessModes contains the desired access modes the volume should have.
    More

    info: [https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1](https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1).'
  name: access_modes
  types:
  - <xref:list>[<xref:str>]
- description: 'This field can be used to specify either: * An existing VolumeSnapshot

    object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim)
    If

    the provisioner or an external controller can support the specified data source,
    it will create

    a new volume based on the contents of the specified data source. If the AnyVolumeDataSource

    feature gate is enabled, this field will always have the same contents as the
    DataSourceRef

    field.'
  name: data_source
  types:
  - <xref:azure.mgmt.iotoperations.models.LocalKubernetesReference>
- description: 'Specifies the object from which to populate the volume with data,
    if a

    non-empty volume is desired. This may be any local object from a non-empty API
    group (non core

    object) or a PersistentVolumeClaim object. When this field is specified, volume
    binding will

    only succeed if the type of the specified object matches some installed volume
    populator or

    dynamic provisioner. This field will replace the functionality of the DataSource
    field and as

    such if both fields are non-empty, they must have the same value. For backwards
    compatibility,

    both fields (DataSource and DataSourceRef) will be set to the same value automatically
    if one

    of them is empty and the other is non-empty. There are two important differences
    between

    DataSource and DataSourceRef: * While DataSource only allows two specific types
    of objects,

    DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
    * While

    DataSource ignores disallowed values (dropping them), DataSourceRef preserves
    all values, and

    generates an error if a disallowed value is specified. (Beta) Using this field
    requires the

    AnyVolumeDataSource feature gate to be enabled.'
  name: data_source_ref
  types:
  - <xref:azure.mgmt.iotoperations.models.KubernetesReference>
- description: 'Resources represents the minimum resources the volume should have.
    If

    RecoverVolumeExpansionFailure feature is enabled users are allowed to specify
    resource

    requirements that are lower than previous value but must still be higher than
    capacity recorded

    in the status field of the claim. More info:

    [https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources](https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources).'
  name: resources
  types:
  - <xref:azure.mgmt.iotoperations.models.VolumeClaimResourceRequirements>
- description: A label query over volumes to consider for binding.
  name: selector
  types:
  - <xref:azure.mgmt.iotoperations.models.VolumeClaimSpecSelector>
attributes:
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.access_modes
  name: access_modes
  summary: 'AccessModes contains the desired access modes the volume should have.
    More info:

    [https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1](https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1).'
  signature: 'access_modes: List[str] | None'
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.data_source
  name: data_source
  summary: "* An existing VolumeSnapshot object \n\n(snapshot.storage.k8s.io/VolumeSnapshot)\
    \ * An existing PVC (PersistentVolumeClaim) If the\nprovisioner or an external\
    \ controller can support the specified data source, it will create a\nnew volume\
    \ based on the contents of the specified data source. If the AnyVolumeDataSource\n\
    feature gate is enabled, this field will always have the same contents as the\
    \ DataSourceRef\nfield."
  signature: 'data_source: _models.LocalKubernetesReference | None'
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.data_source_ref
  name: data_source_ref
  summary: 'Specifies the object from which to populate the volume with data, if a
    non-empty volume is

    desired. This may be any local object from a non-empty API group (non core object)
    or a

    PersistentVolumeClaim object. When this field is specified, volume binding will
    only succeed if

    the type of the specified object matches some installed volume populator or dynamic

    provisioner. This field will replace the functionality of the DataSource field
    and as such if

    both fields are non-empty, they must have the same value. For backwards compatibility,
    both

    fields (DataSource and DataSourceRef) will be set to the same value automatically
    if one of

    them is empty and the other is non-empty. There are two important differences
    between

    DataSource and DataSourceRef: * While DataSource only allows two specific types
    of objects,

    DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
    * While

    DataSource ignores disallowed values (dropping them), DataSourceRef preserves
    all values, and

    generates an error if a disallowed value is specified. (Beta) Using this field
    requires the

    AnyVolumeDataSource feature gate to be enabled.'
  signature: 'data_source_ref: _models.KubernetesReference | None'
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.resources
  name: resources
  summary: 'Resources represents the minimum resources the volume should have. If

    RecoverVolumeExpansionFailure feature is enabled users are allowed to specify
    resource

    requirements that are lower than previous value but must still be higher than
    capacity recorded

    in the status field of the claim. More info:

    [https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources](https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources).'
  signature: 'resources: _models.VolumeClaimResourceRequirements | None'
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.selector
  name: selector
  summary: A label query over volumes to consider for binding.
  signature: 'selector: _models.VolumeClaimSpecSelector | None'
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.storage_class_name
  name: storage_class_name
  summary: 'Name of the StorageClass required by the claim. More info:

    [https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1](https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1).'
  signature: 'storage_class_name: str | None'
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.volume_mode
  name: volume_mode
  summary: 'volumeMode defines what type of volume is required by the claim. Value
    of Filesystem is implied

    when not included in claim spec. This is a beta feature.'
  signature: 'volume_mode: str | None'
- uid: azure.mgmt.iotoperations.models.VolumeClaimSpec.volume_name
  name: volume_name
  summary: VolumeName is the binding reference to the PersistentVolume backing this
    claim.
  signature: 'volume_name: str | None'
