### YamlMime:PythonClass
uid: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings
name: ImageModelDistributionSettings
fullName: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings
module: azure.mgmt.machinelearningservices.models
inheritances:
- azure.mgmt.machinelearningservices._serialization.Model
summary: 'Distribution expressions to sweep over values of model settings.


  `<example>

  Some examples are:

  ```

  ModelName = "choice(''seresnext'', ''resnest50'')";

  LearningRate = "uniform(0.001, 0.01)";

  LayersToFreeze = "choice(0, 2)";

  >>``<<*</example>*

  All distributions can be specified as distribution_name(min, max) or choice(val1,
  val2, ...,

  valn)

  where distribution name can be: uniform, quniform, loguniform, etc

  For more details on how to compose distribution expressions please check the documentation:

  [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters)

  For more information on the available settings please visit the official documentation:

  [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models).'
constructor:
  syntax: 'ImageModelDistributionSettings(*, ams_gradient: str | None = None, augmentations:
    str | None = None, beta1: str | None = None, beta2: str | None = None, distributed:
    str | None = None, early_stopping: str | None = None, early_stopping_delay: str
    | None = None, early_stopping_patience: str | None = None, enable_onnx_normalization:
    str | None = None, evaluation_frequency: str | None = None, gradient_accumulation_step:
    str | None = None, layers_to_freeze: str | None = None, learning_rate: str | None
    = None, learning_rate_scheduler: str | None = None, model_name: str | None = None,
    momentum: str | None = None, nesterov: str | None = None, number_of_epochs: str
    | None = None, number_of_workers: str | None = None, optimizer: str | None = None,
    random_seed: str | None = None, step_lr_gamma: str | None = None, step_lr_step_size:
    str | None = None, training_batch_size: str | None = None, validation_batch_size:
    str | None = None, warmup_cosine_lr_cycles: str | None = None, warmup_cosine_lr_warmup_epochs:
    str | None = None, weight_decay: str | None = None, **kwargs: Any)'
  parameters:
  - name: ams_gradient
    description: Enable AMSGrad when optimizer is 'adam' or 'adamw'.
    types:
    - <xref:str>
  - name: augmentations
    description: Settings for using Augmentations.
    types:
    - <xref:str>
  - name: beta1
    description: 'Value of ''beta1'' when optimizer is ''adam'' or ''adamw''. Must
      be a float in the

      range [0, 1].'
    types:
    - <xref:str>
  - name: beta2
    description: 'Value of ''beta2'' when optimizer is ''adam'' or ''adamw''. Must
      be a float in the

      range [0, 1].'
    types:
    - <xref:str>
  - name: distributed
    description: Whether to use distributer training.
    types:
    - <xref:str>
  - name: early_stopping
    description: Enable early stopping logic during training.
    types:
    - <xref:str>
  - name: early_stopping_delay
    description: 'Minimum number of epochs or validation evaluations to wait

      before primary metric improvement

      is tracked for early stopping. Must be a positive integer.'
    types:
    - <xref:str>
  - name: early_stopping_patience
    description: 'Minimum number of epochs or validation evaluations with no

      primary metric improvement before

      the run is stopped. Must be a positive integer.'
    types:
    - <xref:str>
  - name: enable_onnx_normalization
    description: Enable normalization when exporting ONNX model.
    types:
    - <xref:str>
  - name: evaluation_frequency
    description: 'Frequency to evaluate validation dataset to get metric scores.

      Must be a positive integer.'
    types:
    - <xref:str>
  - name: gradient_accumulation_step
    description: 'Gradient accumulation means running a configured number of

      "GradAccumulationStep" steps without

      updating the model weights while accumulating the gradients of those steps,
      and then using

      the accumulated gradients to compute the weight updates. Must be a positive
      integer.'
    types:
    - <xref:str>
  - name: layers_to_freeze
    description: 'Number of layers to freeze for the model. Must be a positive

      integer.

      For instance, passing 2 as value for ''seresnext'' means

      freezing layer0 and layer1. For a full list of models supported and details
      on layer freeze,

      please

      see: [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models).'
    types:
    - <xref:str>
  - name: learning_rate
    description: Initial learning rate. Must be a float in the range [0, 1].
    types:
    - <xref:str>
  - name: learning_rate_scheduler
    description: 'Type of learning rate scheduler. Must be ''warmup_cosine'' or

      ''step''.'
    types:
    - <xref:str>
  - name: model_name
    description: 'Name of the model to use for training.

      For more information on the available models please visit the official documentation:

      [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models).'
    types:
    - <xref:str>
  - name: momentum
    description: 'Value of momentum when optimizer is ''sgd''. Must be a float in
      the range [0,

      1].'
    types:
    - <xref:str>
  - name: nesterov
    description: Enable nesterov when optimizer is 'sgd'.
    types:
    - <xref:str>
  - name: number_of_epochs
    description: Number of training epochs. Must be a positive integer.
    types:
    - <xref:str>
  - name: number_of_workers
    description: Number of data loader workers. Must be a non-negative integer.
    types:
    - <xref:str>
  - name: optimizer
    description: Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
    types:
    - <xref:str>
  - name: random_seed
    description: Random seed to be used when using deterministic training.
    types:
    - <xref:str>
  - name: step_lr_gamma
    description: 'Value of gamma when learning rate scheduler is ''step''. Must be
      a float

      in the range [0, 1].'
    types:
    - <xref:str>
  - name: step_lr_step_size
    description: 'Value of step size when learning rate scheduler is ''step''. Must
      be

      a positive integer.'
    types:
    - <xref:str>
  - name: training_batch_size
    description: Training batch size. Must be a positive integer.
    types:
    - <xref:str>
  - name: validation_batch_size
    description: Validation batch size. Must be a positive integer.
    types:
    - <xref:str>
  - name: warmup_cosine_lr_cycles
    description: 'Value of cosine cycle when learning rate scheduler is

      ''warmup_cosine''. Must be a float in the range [0, 1].'
    types:
    - <xref:str>
  - name: warmup_cosine_lr_warmup_epochs
    description: 'Value of warmup epochs when learning rate scheduler is

      ''warmup_cosine''. Must be a positive integer.'
    types:
    - <xref:str>
  - name: weight_decay
    description: 'Value of weight decay when optimizer is ''sgd'', ''adam'', or ''adamw''.
      Must

      be a float in the range[0, 1].'
    types:
    - <xref:str>
variables:
- description: Enable AMSGrad when optimizer is 'adam' or 'adamw'.
  name: ams_gradient
  types:
  - <xref:str>
- description: Settings for using Augmentations.
  name: augmentations
  types:
  - <xref:str>
- description: 'Value of ''beta1'' when optimizer is ''adam'' or ''adamw''. Must be
    a float in the range

    [0, 1].'
  name: beta1
  types:
  - <xref:str>
- description: 'Value of ''beta2'' when optimizer is ''adam'' or ''adamw''. Must be
    a float in the range

    [0, 1].'
  name: beta2
  types:
  - <xref:str>
- description: Whether to use distributer training.
  name: distributed
  types:
  - <xref:str>
- description: Enable early stopping logic during training.
  name: early_stopping
  types:
  - <xref:str>
- description: 'Minimum number of epochs or validation evaluations to wait before

    primary metric improvement

    is tracked for early stopping. Must be a positive integer.'
  name: early_stopping_delay
  types:
  - <xref:str>
- description: 'Minimum number of epochs or validation evaluations with no

    primary metric improvement before

    the run is stopped. Must be a positive integer.'
  name: early_stopping_patience
  types:
  - <xref:str>
- description: Enable normalization when exporting ONNX model.
  name: enable_onnx_normalization
  types:
  - <xref:str>
- description: 'Frequency to evaluate validation dataset to get metric scores. Must

    be a positive integer.'
  name: evaluation_frequency
  types:
  - <xref:str>
- description: 'Gradient accumulation means running a configured number of

    "GradAccumulationStep" steps without

    updating the model weights while accumulating the gradients of those steps, and
    then using

    the accumulated gradients to compute the weight updates. Must be a positive integer.'
  name: gradient_accumulation_step
  types:
  - <xref:str>
- description: 'Number of layers to freeze for the model. Must be a positive integer.

    For instance, passing 2 as value for ''seresnext'' means

    freezing layer0 and layer1. For a full list of models supported and details on
    layer freeze,

    please

    see: [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models).'
  name: layers_to_freeze
  types:
  - <xref:str>
- description: Initial learning rate. Must be a float in the range [0, 1].
  name: learning_rate
  types:
  - <xref:str>
- description: 'Type of learning rate scheduler. Must be ''warmup_cosine'' or

    ''step''.'
  name: learning_rate_scheduler
  types:
  - <xref:str>
- description: 'Name of the model to use for training.

    For more information on the available models please visit the official documentation:

    [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models).'
  name: model_name
  types:
  - <xref:str>
- description: Value of momentum when optimizer is 'sgd'. Must be a float in the range
    [0, 1].
  name: momentum
  types:
  - <xref:str>
- description: Enable nesterov when optimizer is 'sgd'.
  name: nesterov
  types:
  - <xref:str>
- description: Number of training epochs. Must be a positive integer.
  name: number_of_epochs
  types:
  - <xref:str>
- description: Number of data loader workers. Must be a non-negative integer.
  name: number_of_workers
  types:
  - <xref:str>
- description: Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
  name: optimizer
  types:
  - <xref:str>
- description: Random seed to be used when using deterministic training.
  name: random_seed
  types:
  - <xref:str>
- description: 'Value of gamma when learning rate scheduler is ''step''. Must be a
    float in

    the range [0, 1].'
  name: step_lr_gamma
  types:
  - <xref:str>
- description: 'Value of step size when learning rate scheduler is ''step''. Must
    be a

    positive integer.'
  name: step_lr_step_size
  types:
  - <xref:str>
- description: Training batch size. Must be a positive integer.
  name: training_batch_size
  types:
  - <xref:str>
- description: Validation batch size. Must be a positive integer.
  name: validation_batch_size
  types:
  - <xref:str>
- description: 'Value of cosine cycle when learning rate scheduler is

    ''warmup_cosine''. Must be a float in the range [0, 1].'
  name: warmup_cosine_lr_cycles
  types:
  - <xref:str>
- description: 'Value of warmup epochs when learning rate scheduler is

    ''warmup_cosine''. Must be a positive integer.'
  name: warmup_cosine_lr_warmup_epochs
  types:
  - <xref:str>
- description: 'Value of weight decay when optimizer is ''sgd'', ''adam'', or ''adamw''.
    Must be

    a float in the range[0, 1].'
  name: weight_decay
  types:
  - <xref:str>
methods:
- uid: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.mgmt.machinelearningservices.models.ImageModelDistributionSettings.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
