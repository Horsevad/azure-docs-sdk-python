### YamlMime:PythonClass
uid: azure.core.AsyncPipelineClient
name: AsyncPipelineClient
fullName: azure.core.AsyncPipelineClient
module: azure.core
inheritances:
- azure.core.pipeline.transport._base.PipelineClientBase
- contextlib.AbstractAsyncContextManager
- typing.Generic
summary: 'Service client core methods.


  Builds an AsyncPipeline client.'
constructor:
  syntax: 'AsyncPipelineClient(base_url: str, *, pipeline: AsyncPipeline[HTTPRequestType,
    AsyncHTTPResponseType] | None = None, config: Configuration[HTTPRequestType, AsyncHTTPResponseType]
    | None = None, **kwargs: Any)'
  parameters:
  - name: base_url
    description: URL for the request.
    isRequired: true
    types:
    - <xref:str>
  - name: config
    description: If omitted, the standard configuration is used.
    types:
    - <xref:azure.core.configuration.Configuration>
  - name: pipeline
    description: If omitted, a Pipeline object is created and returned.
    types:
    - <xref:Pipeline>
  - name: policies
    description: If omitted, the standard policies of the configuration object is
      used.
    types:
    - <xref:list>[<xref:AsyncHTTPPolicy>]
  - name: per_call_policies
    description: If specified, the policies will be added into the policy list before
      RetryPolicy
    types:
    - <xref:typing.Union>[<xref:AsyncHTTPPolicy>, <xref:SansIOHTTPPolicy>, <xref:list>[<xref:AsyncHTTPPolicy>],
      <xref:list>[<xref:SansIOHTTPPolicy>]]
  - name: per_retry_policies
    description: If specified, the policies will be added into the policy list after
      RetryPolicy
    types:
    - <xref:typing.Union>[<xref:AsyncHTTPPolicy>, <xref:SansIOHTTPPolicy>, <xref:list>[<xref:AsyncHTTPPolicy>],
      <xref:list>[<xref:SansIOHTTPPolicy>]]
  - name: transport
    description: If omitted, AioHttpTransport is used for asynchronous transport.
    types:
    - <xref:AsyncHttpTransport>
methods:
- uid: azure.core.AsyncPipelineClient.close
  name: close
  signature: async close() -> None
- uid: azure.core.AsyncPipelineClient.send_request
  name: send_request
  summary: 'Method that runs the network request through the client''s chained policies.


    ```


    >>> from azure.core.rest import HttpRequest

    >>> request = HttpRequest(''GET'', ''http://www.example.com'')

    <HttpRequest [GET], url: ''http://www.example.com''>

    >>> response = await client.send_request(request)

    <AsyncHttpResponse: 200 OK>

    ```'
  signature: 'send_request(request: HTTPRequestType, *, stream: bool = False, **kwargs:
    Any) -> Awaitable[AsyncHTTPResponseType]'
  parameters:
  - name: request
    description: The network request you want to make. Required.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
