### YamlMime:PythonClass
uid: azure.data.tables.TableClient
name: TableClient
fullName: azure.data.tables.TableClient
module: azure.data.tables
inheritances:
- azure.data.tables._base_client.TablesBaseClient
summary: 'A client to interact with a specific Table in an Azure Tables account.


  Create TableClient from a Credential.'
constructor:
  syntax: 'TableClient(endpoint: str, table_name: str, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: A URL to an Azure Tables account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be one of AzureNamedKeyCredential
      (azure-core),

      AzureSasCredential (azure-core), or TokenCredentials from azure-identity.'
    types:
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: 'Specifies the version of the operation to use for this request.
      Default value

      is "2019-02-02". Note that overriding this default value may result in unsupported
      behavior.'
    types:
    - <xref:str>
variables:
- description: The name of the Tables account.
  name: account_name
  types:
  - <xref:str>
- description: The name of the table.
  name: table_name
  types:
  - <xref:str>
- description: The full URL to the Tables account.
  name: url
  types:
  - <xref:str>
methods:
- uid: azure.data.tables.TableClient.create_entity
  name: create_entity
  summary: Insert entity in a table.
  signature: 'create_entity(entity: TableEntity | Mapping[str, Any], **kwargs: Any)
    -> Dict[str, str]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:Union>[<xref:azure.data.tables.TableEntity>, <xref:Mapping>[<xref:str>,
      <xref:Any>]]
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:Dict>[<xref:str,str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.create_table
  name: create_table
  summary: Creates a new table under the current account.
  signature: 'create_table(**kwargs: Any) -> TableItem'
  return:
    description: A TableItem representing the created table.
    types:
    - <xref:azure.data.tables.TableItem>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
    description: If the entity already exists
- uid: azure.data.tables.TableClient.delete_entity
  name: delete_entity
  summary: 'Deletes the specified entity in a table. No error will be raised if

    the entity or PartitionKey-RowKey pairing is not found.'
  signature: delete_entity(partition_key, row_key, **kwargs)
  parameters:
  - name: partition_key
    description: The partition key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: row_key
    description: The row key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: entity
    description: The entity to delete
    isRequired: true
    types:
    - <xref:Union>[<xref:azure.data.tables.TableEntity>, <xref:Mapping>[<xref:str>,
      <xref:str>]]
  - name: etag
    description: Etag of the entity
    types:
    - <xref:str>
  - name: match_condition
    description: 'The condition under which to perform the operation.

      Supported values include: MatchConditions.IfNotModified, MatchConditions.Unconditionally.

      The default value is Unconditionally.'
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.delete_table
  name: delete_table
  summary: 'Deletes the table under the current account. No error will be raised

    if the table does not exist'
  signature: 'delete_table(**kwargs: Any) -> None'
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.from_connection_string
  name: from_connection_string
  summary: Create TableClient from a Connection String.
  signature: 'from_connection_string(conn_str: str, table_name: str, **kwargs: Any)
    -> TableClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Tables account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.TableClient.from_table_url
  name: from_table_url
  summary: A client to interact with a specific Table.
  signature: 'from_table_url(table_url: str, **kwargs: Any) -> TableClient'
  parameters:
  - name: table_url
    description: The full URI to the table, including SAS token if used.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be one of AzureNamedKeyCredential

      or AzureSasCredential from azure-core.'
    types:
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.TableClient.get_entity
  name: get_entity
  summary: Get a single entity in a table.
  signature: 'get_entity(partition_key: str, row_key: str, **kwargs: Any) -> TableEntity'
  parameters:
  - name: partition_key
    description: The partition key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: row_key
    description: The row key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:List>[<xref:str>]
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:azure.data.tables.TableEntity>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.get_table_access_policy
  name: get_table_access_policy
  summary: 'Retrieves details about any stored access policies specified on the table
    that may be

    used with Shared Access Signatures.'
  signature: 'get_table_access_policy(**kwargs: Any) -> Dict[str, TableAccessPolicy
    | None]'
  return:
    description: Dictionary of SignedIdentifiers
    types:
    - <xref:Dict>[<xref:str>, <xref:Optional>[<xref:azure.data.tables.TableAccessPolicy>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.list_entities
  name: list_entities
  summary: Lists entities in a table.
  signature: 'list_entities(**kwargs: Any) -> ItemPaged[TableEntity]'
  parameters:
  - name: results_per_page
    description: Number of entities returned per service request.
    types:
    - <xref:int>
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:List>[<xref:str>]
  return:
    description: ItemPaged[<xref:azure.data.tables.TableEntity>]
    types:
    - <xref:azure.core.paging.ItemPaged>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.query_entities
  name: query_entities
  summary: Lists entities in a table.
  signature: 'query_entities(query_filter: str, **kwargs: Dict[str, Any]) -> ItemPaged[TableEntity]'
  parameters:
  - name: query_filter
    description: 'Specify a filter to return certain entities. For more information

      on filter formatting, see the [samples documentation](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples#writing-filters).'
    isRequired: true
    types:
    - <xref:str>
  - name: results_per_page
    description: Number of entities returned per service request.
    types:
    - <xref:int>
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:List>[<xref:str>]
  - name: parameters
    description: Dictionary for formatting query with additional, user defined parameters
    types:
    - <xref:Dict>[<xref:str>, <xref:Any>]
  return:
    description: ItemPaged[<xref:azure.data.tables.TableEntity>]
    types:
    - <xref:azure.core.paging.ItemPaged>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.set_table_access_policy
  name: set_table_access_policy
  summary: Sets stored access policies for the table that may be used with Shared
    Access Signatures.
  signature: 'set_table_access_policy(signed_identifiers: Dict[str, TableAccessPolicy
    | None], **kwargs) -> None'
  parameters:
  - name: signed_identifiers
    description: Access policies to set for the table
    isRequired: true
    types:
    - <xref:Dict>[<xref:str>, <xref:Optional>[<xref:azure.data.tables.TableAccessPolicy>]]
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.submit_transaction
  name: submit_transaction
  summary: 'Commit a list of operations as a single transaction.


    If any one of these operations fails, the entire transaction will be rejected.'
  signature: 'submit_transaction(operations: Iterable[Tuple[TransactionOperation |
    str, TableEntity | Mapping[str, Any]] | Tuple[TransactionOperation | str, TableEntity
    | Mapping[str, Any], Mapping[str, Any]]], **kwargs: Any) -> List[Mapping[str,
    Any]]'
  parameters:
  - name: operations
    description: "The list of operations to commit in a transaction. This should be\
      \ an iterable of\ntuples containing an operation name, the entity on which to\
      \ operate, and optionally, a dict of additional\nkwargs for that operation.\
      \ For example:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
      : [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
      : \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\n\
      \   - ('upsert', {'PartitionKey': 'A', 'RowKey': 'B'})\n   - ('upsert', {'PartitionKey':\
      \ 'A', 'RowKey': 'B'}, {'mode': UpdateMode.REPLACE})\n   ````"
    isRequired: true
    types:
    - <xref:Iterable>[<xref:Tuple>[<xref:str>, <xref:azure.data.tables.TableEntity>,
      <xref:Mapping>[<xref:str>, <xref:Any>]]]
  return:
    description: A list of mappings with response metadata for each operation in the
      transaction.
    types:
    - <xref:List>[<xref:Mapping>[<xref:str>, <xref:Any>]]
  exceptions:
  - type: azure.data.tables.TableTransactionError
- uid: azure.data.tables.TableClient.update_entity
  name: update_entity
  summary: Update entity in a table.
  signature: 'update_entity(entity: TableEntity | Mapping[str, Any], mode: UpdateMode
    = UpdateMode.MERGE, **kwargs: Any) -> Dict[str, str]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - <xref:Dict>[<xref:str,str>]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  - name: etag
    description: Etag of the entity
    types:
    - <xref:str>
  - name: match_condition
    description: 'The condition under which to perform the operation.

      Supported values include: MatchConditions.IfNotModified, MatchConditions.Unconditionally.

      The default value is Unconditionally.'
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:Dict>[<xref:str,str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.upsert_entity
  name: upsert_entity
  summary: Update/Merge or Insert entity into table.
  signature: 'upsert_entity(entity: TableEntity | Mapping[str, Any], mode: UpdateMode
    = UpdateMode.MERGE, **kwargs: Any) -> Dict[str, str]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - <xref:Dict>[<xref:str,str>]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:Dict>[<xref:str,str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
