### YamlMime:PythonClass
uid: azure.durable_functions.models.Task.RetryAbleTask
name: RetryAbleTask
fullName: azure.durable_functions.models.Task.RetryAbleTask
module: azure.durable_functions.models.Task
inheritances:
- azure.durable_functions.models.Task.WhenAllTask
summary: 'A Task representing *with_retry* scenarios.


  It inherits from WhenAllTask because retryable scenarios are Tasks

  with equivalent to WhenAll Tasks with dynamically increasing lists

  of children. At every failure, we add a Timer child and a Task child

  to the list of pending tasks.'
constructor:
  syntax: 'RetryAbleTask(child: TaskBase, retry_options: RetryOptions, context)'
  parameters:
  - name: child
    isRequired: true
  - name: retry_options
    isRequired: true
  - name: context
    isRequired: true
methods:
- uid: azure.durable_functions.models.Task.RetryAbleTask.try_set_value
  name: try_set_value
  summary: Transition a Retryable Task to a terminal state and set its value.
  signature: 'try_set_value(child: TaskBase)'
  parameters:
  - name: child
    description: A sub-task that just completed
    isRequired: true
    types:
    - <xref:azure.durable_functions.models.Task.TaskBase>
attributes:
- uid: azure.durable_functions.models.Task.RetryAbleTask.id_
  name: id_
  summary: 'Obtain the task''s ID.


    Since this is an internal-only abstraction, the task ID is represented

    by the ID of its inner/wrapped task _plus_ a suffix: "_retryable_proxy"'
  return:
    description: '[description]'
    types:
    - '[<xref:type>]'
